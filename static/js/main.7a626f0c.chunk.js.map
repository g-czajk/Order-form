{"version":3,"sources":["components/OrderForm/formFields.js","components/OrderForm/validate.js","components/OrderForm/OrderForm.js","App.js","index.js"],"names":["formFields","size","field","label","name","margin","required","dependsOn","fieldProps","parse","values","formatString","replace","formControlProps","MenuItem","value","type","InputProps","inputProps","min","parseInt","step","decPlaces","parseFloat","toFixed","max","regExp","RegExp","validate","errors","preparation_time","test","no_of_slices","diameter","spiciness_scale","slices_of_bread","OrderForm","useState","success","setSuccess","error","setError","clearNotifications","onSubmit","a","fetch","method","headers","body","JSON","stringify","then","res","json","data","forEach","err","console","log","message","FORM_ERROR","catch","style","padding","maxWidth","initialValues","render","handleSubmit","submitting","form","formError","validationError","Object","keys","length","restart","noValidate","Paper","paddingTop","paddingRight","paddingBottom","paddingLeft","Grid","container","item","justify","marginBottom","Typography","variant","component","color","alignItems","spacing","filter","map","index","xs","marginTop","className","marginLeft","marginRight","Button","disabled","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7a626f0c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField, Select } from \"mui-rff\";\r\nimport formatString from \"format-string-by-pattern\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\n\r\nconst convertToFloat = (num, decPlaces) => {\r\n    return parseFloat(parseFloat(num).toFixed(decPlaces));\r\n};\r\n\r\nconst formFields = [\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Dish name\"\r\n                name=\"name\"\r\n                margin=\"none\"\r\n                required={true}\r\n            />\r\n        ),\r\n        dependsOn: null,\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Preparation time (hh:mm:ss)\"\r\n                name=\"preparation_time\"\r\n                margin=\"none\"\r\n                required={true}\r\n                fieldProps={{\r\n                    parse: (values) =>\r\n                        formatString(\"HH:MM:SS\", values.replace(/[^\\d]/g, \"\")),\r\n                }}\r\n            />\r\n        ),\r\n        dependsOn: null,\r\n    },\r\n    {\r\n        size: 4,\r\n        field: (\r\n            <Select\r\n                name=\"type\"\r\n                label=\"Select dish type\"\r\n                formControlProps={{ margin: \"none\" }}\r\n            >\r\n                <MenuItem value=\"pizza\">Pizza</MenuItem>\r\n                <MenuItem value=\"soup\">Soup</MenuItem>\r\n                <MenuItem value=\"sandwich\">Sandwich</MenuItem>\r\n            </Select>\r\n        ),\r\n        dependsOn: null,\r\n    },\r\n    {\r\n        size: 4,\r\n        field: (\r\n            <TextField\r\n                label=\"No. of slices\"\r\n                name=\"no_of_slices\"\r\n                margin=\"none\"\r\n                type=\"number\"\r\n                required={true}\r\n                InputProps={{\r\n                    inputProps: {\r\n                        min: 1,\r\n                    },\r\n                }}\r\n                fieldProps={{\r\n                    parse: (values) => {\r\n                        if (values !== \"\") {\r\n                            return parseInt(values);\r\n                        } else return undefined;\r\n                    },\r\n                }}\r\n            />\r\n        ),\r\n        dependsOn: \"pizza\",\r\n    },\r\n    {\r\n        size: 4,\r\n        field: (\r\n            <TextField\r\n                label=\"Diameter\"\r\n                name=\"diameter\"\r\n                margin=\"none\"\r\n                type=\"number\"\r\n                InputProps={{\r\n                    inputProps: {\r\n                        step: 0.1,\r\n                    },\r\n                }}\r\n                fieldProps={{\r\n                    parse: (values) => {\r\n                        if (values !== \"\") {\r\n                            return convertToFloat(values, 2);\r\n                        } else return undefined;\r\n                    },\r\n                }}\r\n                required={true}\r\n            />\r\n        ),\r\n        dependsOn: \"pizza\",\r\n    },\r\n    {\r\n        size: 8,\r\n        field: (\r\n            <TextField\r\n                label=\"Spiciness scale (1-10)\"\r\n                name=\"spiciness_scale\"\r\n                margin=\"none\"\r\n                type=\"number\"\r\n                InputProps={{\r\n                    inputProps: {\r\n                        min: 1,\r\n                        max: 10,\r\n                    },\r\n                }}\r\n                fieldProps={{\r\n                    parse: (values) => {\r\n                        if (values !== \"\") {\r\n                            return parseInt(values);\r\n                        } else return undefined;\r\n                    },\r\n                }}\r\n                required={true}\r\n            />\r\n        ),\r\n        dependsOn: \"soup\",\r\n    },\r\n    {\r\n        size: 8,\r\n        field: (\r\n            <TextField\r\n                label=\"Slices of bread\"\r\n                name=\"slices_of_bread\"\r\n                margin=\"none\"\r\n                type=\"number\"\r\n                required={true}\r\n                fieldProps={{\r\n                    parse: (values) => {\r\n                        if (values !== \"\") {\r\n                            return parseInt(values);\r\n                        } else return undefined;\r\n                    },\r\n                }}\r\n            />\r\n        ),\r\n        dependsOn: \"sandwich\",\r\n    },\r\n];\r\n\r\nexport default formFields;\r\n","const regExp = new RegExp(/(?:[01]\\d|[0-9][0-9]):(?:[0-5]\\d):(?:[0-5]\\d)/);\r\n\r\nconst validate = (values) => {\r\n    const errors = {};\r\n\r\n    if (!values.name) {\r\n        errors.name = \"Required\";\r\n    }\r\n    if (!values.preparation_time) {\r\n        errors.preparation_time = \"Required\";\r\n    }\r\n\r\n    if (values.preparation_time && !regExp.test(values.preparation_time)) {\r\n        errors.preparation_time = \"Invalid data format (correct: hh:mm:ss)\";\r\n    }\r\n\r\n    if (!values.type) {\r\n        errors.type = \"Required\";\r\n    }\r\n\r\n    if (values.type === \"pizza\") {\r\n        if (!values.no_of_slices) {\r\n            errors.no_of_slices = \"Required\";\r\n        }\r\n        if (values.no_of_slices < 1 && values.no_of_slices !== \"\") {\r\n            errors.no_of_slices = \"Insert correct number\";\r\n        }\r\n        if (!values.diameter) {\r\n            errors.diameter = \"Required\";\r\n        }\r\n        if (values.diameter <= 0 && values.diameter !== \"\") {\r\n            errors.diameter = \"Insert correct number\";\r\n        }\r\n    } else if (values.type === \"soup\") {\r\n        if (!values.spiciness_scale) {\r\n            errors.spiciness_scale = \"Required\";\r\n        }\r\n        if (values.spiciness_scale < 1 || values.spiciness_scale > 10) {\r\n            errors.spiciness_scale = \"Insert correct number (1-10)\";\r\n        }\r\n    } else if (values.type === \"sandwich\") {\r\n        if (!values.slices_of_bread) {\r\n            errors.slices_of_bread = \"Required\";\r\n        }\r\n        if (values.slices_of_bread < 1 && values.slices_of_bread !== \"\") {\r\n            errors.slices_of_bread = \"Insert correct number\";\r\n        }\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport default validate;\r\n","import React, { useState } from \"react\";\r\nimport { Form } from \"react-final-form\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { Paper, Grid, Button, Typography } from \"@material-ui/core\";\r\nimport formFields from \"./formFields\";\r\nimport validate from \"./validate\";\r\n\r\nconst OrderForm = () => {\r\n    const [success, setSuccess] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const clearNotifications = () => {\r\n        setSuccess(null);\r\n        setError(null);\r\n    };\r\n\r\n    const onSubmit = async (values) => {\r\n        await fetch(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(values),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.errors) {\r\n                    setError(\"Submission failed.\");\r\n                    data.errors.forEach((err) => console.log(err.message));\r\n                    return { [FORM_ERROR]: \"Submission failed.\" };\r\n                } else {\r\n                    setSuccess(\r\n                        \"Congratulations! Your order has been submitted.\"\r\n                    );\r\n                    console.log(data); // preview of response data (for development purposes only)\r\n                }\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: 16, margin: \"auto\", maxWidth: 600 }}>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                initialValues={{}}\r\n                validate={validate} // validate function is imported from ./validate.js\r\n                render={({ handleSubmit, submitting, values, form }) => {\r\n                    return (\r\n                        <form\r\n                            onSubmit={async (...args) => {\r\n                                clearNotifications();\r\n                                const formError = await handleSubmit(...args);\r\n                                const validationError = validate(values);\r\n                                if (formError) {\r\n                                    return;\r\n                                }\r\n                                if (\r\n                                    !formError &&\r\n                                    Object.keys(validationError).length === 0\r\n                                ) {\r\n                                    form.restart();\r\n                                }\r\n                            }}\r\n                            noValidate\r\n                        >\r\n                            <Paper\r\n                                style={{\r\n                                    paddingTop: 24,\r\n                                    paddingRight: 16,\r\n                                    paddingBottom: 24,\r\n                                    paddingLeft: 16,\r\n                                }}\r\n                            >\r\n                                <Grid\r\n                                    container\r\n                                    item\r\n                                    justify=\"center\"\r\n                                    style={{\r\n                                        marginBottom: 20,\r\n                                    }}\r\n                                >\r\n                                    <Typography\r\n                                        variant=\"h5\"\r\n                                        component=\"h2\"\r\n                                        color=\"textPrimary\"\r\n                                    >\r\n                                        Insert your order\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid\r\n                                    container\r\n                                    alignItems=\"flex-start\"\r\n                                    spacing={2}\r\n                                >\r\n                                    {formFields // formFields array is imported from ./formFields.js\r\n                                        .filter(\r\n                                            (item) =>\r\n                                                item.dependsOn ===\r\n                                                    values.type ||\r\n                                                item.dependsOn === null\r\n                                        )\r\n                                        .map((item, index) => (\r\n                                            <Grid\r\n                                                item\r\n                                                xs={item.size}\r\n                                                key={index}\r\n                                            >\r\n                                                {item.field}\r\n                                            </Grid>\r\n                                        ))}\r\n\r\n                                    <Grid\r\n                                        container\r\n                                        item={error || success ? true : null}\r\n                                        justify=\"center\"\r\n                                        style={\r\n                                            error || success\r\n                                                ? {\r\n                                                      marginTop: 24,\r\n                                                  }\r\n                                                : {}\r\n                                        }\r\n                                    >\r\n                                        {error && (\r\n                                            <Typography\r\n                                                variant=\"body1\"\r\n                                                color=\"error\"\r\n                                            >\r\n                                                {error}\r\n                                            </Typography>\r\n                                        )}\r\n                                        {success && (\r\n                                            <Typography\r\n                                                variant=\"body1\"\r\n                                                className=\"success\"\r\n                                            >\r\n                                                {success}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </Grid>\r\n                                    <Grid\r\n                                        item\r\n                                        style={{\r\n                                            marginTop: 24,\r\n                                            marginLeft: \"auto\",\r\n                                            marginRight: \"auto\",\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={submitting}\r\n                                        >\r\n                                            {!submitting\r\n                                                ? \"Submit\"\r\n                                                : \"Submitting...\"}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderForm;\r\n","import \"./styles/App.css\";\nimport OrderForm from \"./components/OrderForm/OrderForm\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <OrderForm />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}